diff --git a/vendors/phamlp/sass/SassParser.php b/vendors/phamlp/sass/SassParser.php
index 7d728ac..4caf838 100644
--- a/vendors/phamlp/sass/SassParser.php
+++ b/vendors/phamlp/sass/SassParser.php
@@ -295,13 +295,14 @@ class SassParser {
 		
 		if (!empty($options['extensions'])) {
 			foreach ($options['extensions'] as $extension=>$extOptions) {
-				include dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$extension.DIRECTORY_SEPARATOR.'config.php';
+				$name = strtolower($extension);
+				include dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$name.DIRECTORY_SEPARATOR.'config.php';
 				$configClass = 'SassExtentions'.$extension.'Config';
 				$config = new $configClass;
 				$config->config($extOptions);
 				
-				$lp = dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$extension.DIRECTORY_SEPARATOR.'frameworks';
-				$fp = dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$extension.DIRECTORY_SEPARATOR.'functions';
+				$lp = dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$name.DIRECTORY_SEPARATOR.'frameworks';
+				$fp = dirname(__FILE__).DIRECTORY_SEPARATOR.'extensions'.DIRECTORY_SEPARATOR.$name.DIRECTORY_SEPARATOR.'functions';
 				$options['load_paths'] = (empty($options['load_paths']) ?
 					array($lp) : array_merge($options['load_paths'], $lp));
 				$options['function_paths'] = (empty($options['function_paths']) ?
diff --git a/vendors/phamlp/sass/extensions/compass/frameworks/compass/stylesheets/compass/css3/_border-radius.scss b/vendors/phamlp/sass/extensions/compass/frameworks/compass/stylesheets/compass/css3/_border-radius.scss
index 4870b1e..f952230 100644
--- a/vendors/phamlp/sass/extensions/compass/frameworks/compass/stylesheets/compass/css3/_border-radius.scss
+++ b/vendors/phamlp/sass/extensions/compass/frameworks/compass/stylesheets/compass/css3/_border-radius.scss
@@ -54,7 +54,7 @@ $default-border-radius: 5px !default;
       not -khtml,
       not official
     );
-    @include experimental("border-radius", $radius unquote("/") $vertical-radius,
+    @include experimental(border-radius, $radius unquote("/") $vertical-radius,
       -moz,
       not -webkit,
       -o,
@@ -75,7 +75,7 @@ $default-border-radius: 5px !default;
 
 @mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {
   // Support for mozilla's syntax for specifying a corner
-  @include experimental("border-radius-#{$vert}#{$horz}", $radius,
+  @include experimental(unquote("border-radius-#{$vert}#{$horz}"), $radius,
     -moz,
     not -webkit,
     not -o,
@@ -83,7 +83,7 @@ $default-border-radius: 5px !default;
     not -khtml,
     not official
   );
-  @include experimental("border-#{$vert}-#{$horz}-radius", $radius,
+  @include experimental(unquote("border-#{$vert}-#{$horz}-radius"), $radius,
     not -moz,
     -webkit,
     -o,
diff --git a/vendors/phamlp/sass/script/SassScriptFunctions.php b/vendors/phamlp/sass/script/SassScriptFunctions.php
index d3599be..0d0146d 100644
--- a/vendors/phamlp/sass/script/SassScriptFunctions.php
+++ b/vendors/phamlp/sass/script/SassScriptFunctions.php
@@ -641,9 +641,8 @@ class SassScriptFunctions {
 		if (!$number instanceof SassNumber || $number->hasUnits()) {
 			throw new SassScriptFunctionException('{what} must be a {type}', array('{what}'=>'number', '{type}'=>'unitless SassNumber'), SassScriptParser::$context->node);
 		}
-		$number->value *= 100;
-		$number->units = '%';
-		return $number;
+		$value = $number->getValue() * 100;
+		return new SassNumber($value.'%');
 	}
 
 	/**
@@ -748,4 +747,4 @@ class SassScriptFunctions {
 	 private static function inRange($value, $min, $max) {
 	 	 return ($value < $min ? $min : ($value > $max ? $max : $value));
 	}
-}
\ No newline at end of file
+}
diff --git a/vendors/phamlp/sass/script/literals/SassLiteral.php b/vendors/phamlp/sass/script/literals/SassLiteral.php
index 39c43ea..c755fdf 100644
--- a/vendors/phamlp/sass/script/literals/SassLiteral.php
+++ b/vendors/phamlp/sass/script/literals/SassLiteral.php
@@ -219,6 +219,10 @@ abstract class SassLiteral {
 	public function op_or($other) {
 		return ($this->toBoolean() ? $this : $other);
 	}
+
+  public function op_assign($other) {
+    return $other;
+  }
 	
 	/**
 	 * The SassScript xor operation.
diff --git a/vendors/phamlp/sass/script/literals/SassNumber.php b/vendors/phamlp/sass/script/literals/SassNumber.php
index 0c3b7f2..aa6b531 100644
--- a/vendors/phamlp/sass/script/literals/SassNumber.php
+++ b/vendors/phamlp/sass/script/literals/SassNumber.php
@@ -149,6 +149,9 @@ class SassNumber extends SassLiteral {
 		return new SassNumber(($this->value * -1).$this->units);
 	}
 
+	public function op_unary_concat() {
+		return $this;
+	}
 	/**
 	 * Multiplies this value by the value of other
 	 * @param mixed SassNumber|SassColour: value to multiply by
@@ -390,7 +393,13 @@ class SassNumber extends SassLiteral {
 	public function isUnitless() {
 	  return empty($this->numeratorUnits) && empty($this->denominatorUnits);
 	}
-
+	/**
+	 * Returns a value indicating if this number has units.
+	 * @return boolean true if this number has, false if not
+	 */
+	public function hasUnits() {
+		return !$this->isUnitless();
+	}
 	/**
 	 * Returns a value indicating if this number has units that can be represented
 	 * in CSS.
diff --git a/vendors/phamlp/sass/tree/SassPropertyNode.php b/vendors/phamlp/sass/tree/SassPropertyNode.php
index 43dfa55..ee7ba38 100644
--- a/vendors/phamlp/sass/tree/SassPropertyNode.php
+++ b/vendors/phamlp/sass/tree/SassPropertyNode.php
@@ -186,7 +186,7 @@ class SassPropertyNode extends SassNode {
 				return false; 
 			}
 	  	if ($token->level === 0) {
-	  		throw new SassPropertyNodeException('Properties can not be assigned at root level', array(), $this);
+	  		throw new SassPropertyNodeException('Properties can not be assigned at root level', array(), null);
 	  	}
 	  	else {
 				return true;
